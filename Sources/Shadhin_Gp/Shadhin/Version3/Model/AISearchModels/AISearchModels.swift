//
//  AISearchModels.swift
//  Shadhin
//
//  Created by Shadhin Music on 15/5/24.
//  Copyright Â© 2024 Cloud 7 Limited. All rights reserved.
//

import Foundation

// MARK: - Response
struct AIMoodlistModel: Codable {
    let success: Bool
    let responseCode: Int
    let title: String
    let data: [MoodCategory]
    let error: String?
}

// MARK: - Category
struct MoodCategory: Codable {
    let id: Int
    let name: String
    let image: String
    let gif: String
    let sort: Int
}

// MARK: - Response
struct AIPlaylistResponseModel: Codable {
    let success: Bool
    let responseCode: Int
    let title: String
    let data: AIPlaylistData
    let error: String?
}

// MARK: - DataClass
struct AIPlaylistData: Codable {
    let parentContents: [NewContent]
    let contents: [NewContent]
}

// MARK: - Content
struct NewContent: Codable {
    let contentId: Int
    let contentType: String
    let titleBn, titleEn, details: String
    let imageUrl, imageWebUrl: String
    let track: Track?//change
    let isPaid: Bool
    let likeCount: Int
    let sort: Int
    let release: Release?
    let playlist: Playlist?
    let artists: [Artist]
    let genres: [Genre]
    let moods: [Mood]
    let audioBook: JSONNull?
    let ownership: Ownership?
    
    func toCommonContentProtocol()->CommonContent_V4{
        var contentItem = CommonContent_V4()
        contentItem.contentID  = String(self.contentId)
        contentItem.contentType = self.contentType
        contentItem.image = self.imageUrl
        contentItem.title = self.titleEn
        contentItem.artist = self.artists.first?.name ?? ""
        contentItem.playUrl = self.track?.streamingURL
        return contentItem

    }
    
    func toPlaylistDetails()->PlaylistsObj.PlaylistDetails {
        .init(id: String(self.contentId), name: self.titleEn)
    }
}

// MARK: - Ownership
struct Ownership: Codable {
    let label, copyright, productBy, publication: String
}

// MARK: - Artist
struct Artist: Codable {
    let id: Int
    let name: String
    let image: String
}

// MARK: - Genre
struct Genre: Codable {
    let id: Int
    let name: String
    let image: String
}

// MARK: - Mood
struct Mood: Codable {
    let id: Int
    let name: String
    let image: String
}

// MARK: - Playlist
struct Playlist: Codable {
    let autoGenerated: Bool
    let isRadio: Bool
    let contentsCount: Int
}

// MARK: - Release
struct Release: Codable {
    let id: Int
    let name: String
    let date: String
}
/*
// MARK: - ParentContent
struct AIParentContent: Codable {
    let contentId: Int
    let contentType, titleBn, titleEn, details: String
    let imageUrl, imageWebUrl, playUrl: String
    let durationSeconds: Int
    let trackType: String
    let isPaid: Bool
    let likeCount: Int
    let label, copyright: String
    let sort: Int
    let release: String?
    let playlist: Playlist?
    let artists: [Artist]
    let genres: [Genre]
    let moods: [Mood]
    
    func toCommonContentProtocol()->CommonContentProtocol{
        var contentItem = CommonContent_V1()
        contentItem.contentID  = String(self.contentId)
        contentItem.contentType = self.contentType
        contentItem.image = self.imageUrl
        contentItem.title = self.moods.first?.name
        contentItem.artist = self.artists.first?.name ?? ""
        return contentItem

    }
}
*/
// MARK: - Track
struct Track: Codable {
    let streamingURL: String
    let duration: Int
    let trackType: String
    let isLive: Bool

    enum CodingKeys: String, CodingKey {
        case streamingURL = "streamingUrl"
        case duration, trackType, isLive
    }
}

