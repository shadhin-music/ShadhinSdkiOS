//
//  ShadhinApi+MyPlaylist.swift
//  Shadhin
//
//  Created by Gakk Alpha on 6/26/22.
//  Copyright Â© 2022 Cloud 7 Limited. All rights reserved.
//

import Foundation



extension ShadhinApi{
    
    func createUserPlaylist(
        name: String,
        completion: @escaping (_ err: Error?)->Void) {
        let body = [
            "name" : name
        ]
        AF.request(
            CREATE_USER_PLAYLIST,
            method: .post,
            parameters: body,
            encoding: JSONEncoding.default,
            headers: API_HEADER
        ).responseData{ response in
            switch response.result{
            case let .success(data):
                if let json = try? JSONSerialization.jsonObject(with: data),
                   let value = json as? [String : Any] {
                    _ = value["Status"] as? String ?? ""
                    completion(nil)
                }else{
                    let error = NSError(domain: "shadhin.com", code: 0, userInfo: [NSLocalizedDescriptionKey: "We are experiencing technical problems now which will be fixed soon. Thanks for your patience."])
                    completion(error)
                }
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                return completion(error)
            }
        }
    }
    

    func getBothPlaylistsData(completion: @escaping (_ data: [PlaylistsObj.PlaylistDetails]?,Error?)-> Void) {
        let dispatchGroup = DispatchGroup()
        var dataRecievedCount = 0
        var oldData = [PlaylistsObj.PlaylistDetails]()
        var aiData = [NewContent]()
        
        dispatchGroup.enter()
        getAllUserPlaylists {data, error in
            if let data {
                oldData = data
            }
            dispatchGroup.leave()
        }
        
        dispatchGroup.enter()
        getUserPlaylists {data, error in
            
            aiData = data?.filter({$0.playlist?.autoGenerated == true}).compactMap({$0}) ?? []
            
            dispatchGroup.leave()
        }
        
        dispatchGroup.notify(queue: .main) {
            // Perform the data manipulation asynchronously on a background queue
            DispatchQueue.global().async {
                // Perform data manipulation here...
                // This might include parsing, filtering, sorting, or any other operation on the results
                if oldData.isEmpty && aiData.isEmpty {
                    let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                    completion(nil, error)
                }
                for (oldIndex, old) in oldData.enumerated() {
                    for (aiIndex, ai) in aiData.enumerated(){
                        if old.id == String(ai.contentId) {
                            oldData[oldIndex].isAIPlayList = true
                            oldData[oldIndex].aiImageUrl = ai.imageUrl
                        }
                    }
                }
                
                // Once data manipulation is complete, call the completion handler on the main queue
                DispatchQueue.main.async {
                    completion(oldData, nil)
                }
            }
        }

    }

    
    
    
     // OLD Playlist code:
    func getAllUserPlaylists(
        completion: @escaping (_ data: [PlaylistsObj.PlaylistDetails]?,Error?)-> Void) {
        AF.request(
            GET_USER_PLAYLISTS,
            method: .get,
            parameters: nil,
            encoding: JSONEncoding.default,
            headers: API_HEADER)
        .responseDecodable(of: PlaylistsObj.self) { response in
            switch response.result{
            case let .success(data):
                completion(data.data,nil)
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                completion(nil,error)
            }
        }
    }
    
    
    func getUserPlaylists(
        completion: @escaping (_ data: [NewContent]?,Error?)-> Void) {
        AF.request(
            GET_NEW_USER_PLAYLIST(ShadhinCore.instance.defaults.userIdentity),
            method: .get,
            parameters: nil,
            encoding: JSONEncoding.default,
            headers: API_HEADER)
        .responseDecodable(of: UserPlaylistModel.self) { response in
            switch response.result{
            case let .success(data):
                completion(data.data, nil)
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                completion(nil,error)
            }
        }
    }
    
    func deleteUserPlaylist(
        playlistID: String,
        completion: @escaping (_ err: Error?)->Void) {
        AF.request(
            DELETE_USER_PLAYLIST(playlistID),
            method: .delete,
            parameters: nil,
            encoding: JSONEncoding.default,
            headers: API_HEADER)
        .responseData { response in
            switch response.result{
            case let .success(data):
                if let json = try? JSONSerialization.jsonObject(with: data),
                   let value = json as? [String : Any] {
                    _ = value["Status"] as? String ?? ""
                    completion(nil)
                }else{
                    let error = NSError(domain: "shadhin.com", code: 0, userInfo: [NSLocalizedDescriptionKey: "We are experiencing technical problems now which will be fixed soon. Thanks for your patience."])
                    completion(error)
                }
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                completion(error)
            }
        }
    }
    
    
    func addOrDeleteContentInUserPlaylist(
        id: String,
        contentID: String,
        action: UserActionType,
        completion: @escaping (_ status: String?,_ err: Error?)->Void) {
        let body = [
            "playListId" : id,
            "contentId" : contentID
        ]
        var url = ""
        var method: HTTPMethod = .post
        if action == .add{
            url = ADD_TO_USER_PLAYLIST
            method = .post
        }else{
            url = DELETE_FROM_USER_PLAYLIST
            method = .delete
        }
        AF.request(
            url,
            method: method,
            parameters: body,
            encoding: JSONEncoding.default,
            headers: API_HEADER)
        .responseData { response in
            switch response.result{
            case let .success(data):
                if let json = try? JSONSerialization.jsonObject(with: data),
                   let value = json as? [String : Any] {
                    let status = value["Status"] as? String ?? ""
                    completion(status,nil)
                }else{
                    let error = NSError(domain: "shadhin.com", code: 0, userInfo: [NSLocalizedDescriptionKey: "We are experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                    completion(nil, error)
                }
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                completion(nil,error)
            }
        }
    }
    
    func getContentsOfUserPlaylistBy(
        playlistID: String,
        completion: @escaping (_ data: [CommonContent_V4]?,Error?)-> Void) {
        AF.request(
            GET_USER_PLAYLIST_CONTENT(playlistID),
            method: .get,
            parameters: nil,
            encoding: JSONEncoding.default,
            headers: API_HEADER
        ).responseDecodable(of: UserPlaylistDetailsObj.self) { response in
            switch response.result{
            case let .success(data):
                completion(data.data,nil)
            case .failure(_):
                let error = NSError(domain: "", code: 400, userInfo: [ NSLocalizedDescriptionKey: "experiencing technical problems now which will be fixed soon.Thanks for your patience."])
                completion(nil,error)
            }
        }
    }
}
