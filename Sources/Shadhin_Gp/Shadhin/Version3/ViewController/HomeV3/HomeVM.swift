//
//  HomeVM.swift
//  Shadhin
//
//  Created by Joy on 10/10/22.
//  Copyright Â© 2022 Cloud 7 Limited. All rights reserved.
//

import UIKit
protocol HomeVMProtocol : NSObjectProtocol {
    func handle(patches: [HomePatch])
    func handleAIPlaylists(aiPlaylists: [NewContent]?)
    func loading(isLoading: Bool, page: Int)
    func streamNwin(data : StreamNwinCampaignResponse)
    func concertData(data : ConcertEventObj)
    func rewindData(patches : [HomePatch], rewind : [TopStreammingElementModel])
    func refreshHome()
}
class HomeVM: NSObject {
    private weak var presenter : HomeVMProtocol?
    private var currentPage = 1
    private var totalPage = 2
    private var isLoading = false
    private var streamNwinCampaignResponse : StreamNwinCampaignResponse?
    private var concertEventObj : ConcertEventObj?
    private var aiPlaylists: [NewContent]?
    
    init(presenter: HomeVMProtocol? = nil) {
        self.presenter = presenter
    }
    func reset(){
        currentPage = 1
        totalPage = 2
        isLoading = false
        streamNwinCampaignResponse = nil
        concertEventObj = nil
        loadHomeContent()
        loadRecomanded()
    }
}
extension HomeVM{
    
    func loadHomeContent(){
        guard !isLoading, currentPage <= totalPage else {return}
        self.isLoading.toggle()
        presenter?.loading(isLoading: self.isLoading, page: currentPage)
        getHomeContent(by: currentPage)
        if currentPage == 1{
            checkIfCampaignRunning()
            getRewind()
        }
    }
    
    private func getHomeContent(by page: Int){
        ShadhinApi.Home.getHome(by: page) { data, error in
            
            ShadhinCore.instance.api.getUserPlaylists { playlists, err in
                let aiGeneratedPlaylists = playlists?.filter({$0.playlist?.autoGenerated == true})
                if let aiGeneratedPlaylists, aiGeneratedPlaylists.isEmpty {
                    // do nothing
                } else {
                    self.aiPlaylists = aiGeneratedPlaylists
                }
                
                self.isLoading.toggle()
                self.presenter?.loading(isLoading: self.isLoading, page: page)
                guard let patches = data?.data else {return}
                self.totalPage = data?.total ?? 2
                self.currentPage += 1
                self.presenter?.handleAIPlaylists(aiPlaylists: self.aiPlaylists)
                self.presenter?.handle(patches: patches)
                Log.info("Page : \(page)")
            }
            
            
        }
    }
    
    func frefreshAIPlaylists() {
        ShadhinCore.instance.api.getUserPlaylists { playlists, err in
            let aiGeneratedPlaylists = playlists?.filter({$0.playlist?.autoGenerated == true})
            if let aiGeneratedPlaylists, aiGeneratedPlaylists.isEmpty {
                // do nothing
            } else {
                self.aiPlaylists = aiGeneratedPlaylists
            }
            self.presenter?.handleAIPlaylists(aiPlaylists: self.aiPlaylists)
        }
    }
    
    func loadRecomanded(){
        ShadhinApi.Home.getRecomandedHome { data, error in
            guard let patches = data?.data else {return}
            self.presenter?.handle(patches: patches)
        }
    }
    private func checkIfCampaignRunning(){
        ShadhinCore.instance.api.getRunningCampaigns {
            campaigns in
            if campaigns.contains("MusicLiveEvent"){
                self.getConcertData()
            }
            if campaigns.contains("Stream_And_Win"){
                self.getStreamAndWinData()
            }
        }
    }
    
    private func getStreamAndWinData(){
        if self.streamNwinCampaignResponse != nil{
            self.insertStreamAndWinData()
            return
        }
        ShadhinCore.instance.api.getStreamAndWinCampaignData {
            result in
            switch result {
            case .success(let data):
                self.streamNwinCampaignResponse = data
                self.presenter?.streamNwin(data: data)
                self.insertStreamAndWinData()
            case .failure(let error):
                Log.error(error.localizedDescription)
            }
        }
    }
    private func getConcertData(){
        if self.concertEventObj != nil{
            insertConcertTicket()
            return
        }
        ShadhinCore.instance.api.getConcertEventsDetails { _eventData in
            guard let eventData = _eventData else {return}
            self.concertEventObj = eventData
            self.presenter?.concertData(data: eventData)
            self.insertConcertTicket()
        }
    }
    
    private func insertConcertTicket(){
        let content = Content(contentID: "-1",contentType: "R", image: "")
        var patch = HomePatch(patchID: 0, code: "CR", title: "Concert", description: "", designTypeID: -5, image: "", isSeeAllActive: false, sort: 3, contents: [content])
        
        self.presenter?.handle(patches: [patch])
    }
    private func insertStreamAndWinData(){
        let content = Content(contentID: "-1",contentType: "R", image: "")
        var patch = HomePatch(patchID: -1, code: "R", title: "Stream and Win", description: "", designTypeID: -4, image: "", isSeeAllActive: false, sort: 3, contents: [content])
        self.presenter?.handle(patches: [patch])
    }
    private func getRewind(){
        ShadhinCore.instance.api.rewindData { result in
            switch result {
            case .success(let success):
                guard let data = success.data, !data.isEmpty else {return}
                let story = HomePatch(patchID: -1, code: "RS", title: "Rewind", description: "", designTypeID: -6, image: "", isSeeAllActive: false, sort: 2, contents: [])
                self.presenter?.rewindData(patches: [story], rewind: data)
            case .failure(let failure):
                Log.error(failure.localizedDescription)
            }
        }
    }
}
